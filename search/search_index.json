{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#charlie","title":"CHARLIE","text":"<p>CHARLIE=Circrnas in Host And viRuses anaLysis pIpEline</p> <p>Things to know about CHARLIE:</p> <ul> <li>Snakemake workflow to detect, annotate and quantify (DAQ) host and viral circular RNAs.</li> <li>Primirarily developed to run on BIOWULF</li> <li>Reach out to Vishal Koparde for questions/comments/requests.</li> </ul> <p>This circularRNA detection pipeline uses CIRCExplorer2, CIRI2 and many other tools in parallel to detect, quantify and annotate circRNAs. Here is a list of tools that can be run using CHARLIE:</p> circRNA Detection Tool Aligner(s) Run by default CIRCExplorer2 STAR<sup>1</sup> Yes CIRI2 BWA<sup>1</sup> Yes CIRCExplorer2 BWA<sup>1</sup> Yes CLEAR STAR<sup>1</sup> Yes DCC STAR<sup>2</sup> Yes circRNAFinder STAR<sup>3</sup> Yes find_circ Bowtie2 Yes MapSplice BWA<sup>2</sup> No NCLScan NovoAlign No <p>Note: STAR<sup>1</sup>, STAR<sup>2</sup>, STAR<sup>3</sup> denote 3 different sets of alignment parameters, etc.</p> <p>Note: BWA<sup>1</sup>, BWA<sup>2</sup> denote 2 different alignment parameters, etc.</p>"},{"location":"flowchart/","title":"CHARLIE","text":"<p>Flowchart</p> <p></p>"},{"location":"references/","title":"References","text":""},{"location":"references/#charlie","title":"CHARLIE","text":"<p>The reference sequences comprises of the host genome and the viral genomes.</p>"},{"location":"references/#fasta","title":"Fasta","text":"<p>hg38 genome build is chosen to represent human (host). Human ribosomal sequences (45S, 5S) are downloaded from NCBI. hg38 was masked for rRNA sequence and 45S and 5S sequences from NCBI are appended as separate chromosomes. The following viral sequences were appended to the rRNA masked hg38 reference:</p> RefSeq  Sequence RefSeq assembly accession Notes NC_007605.1 GCF_002402265.1 Human gammaherpesvirus 4 (Epstein-Barr virus) NC_000898.1 GCF_000846365.1 Human betaherpesvirus 6B NC_001664.4 GCF_000845685.2 Human betaherpesvirus 6A NC_001716.2 GCF_000848125.1 Human betaherpesvirus 7 NC_006273.2 GCF_000845245.1 Human betaherpesvirus 5 NC_009333.1 GCF_000838265.1 Human gammaherpesvirus 8 NC_045512.2 GCF_009858895.2 Severe acute respiratory syndrome-related coronavirus MN485971.1 xx HIV from Belgium ... GTF is hand curated <p>Location: The entire resource bundle is available at <code>/data/Ziegelbauer_lab/resources/hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC</code> on biowulf. This location also have additional bash scritpts required for aggregating annotations and building indices required by different aligners.</p> <p>Update (02/10/21)</p> <p>The following viral sequence has also been appended to the reference:</p> RefSeq  Sequence RefSeq assembly accession Notes NC_001806.2 GCF_000859985.2 Human alphaherpesvirus 1 (Herpes simplex virus type 1) (strain 17) <p>Location: The updated resource bundle is at <code>/data/Ziegelbauer_lab/resources/hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC.v2</code> on biowulf</p>"},{"location":"references/#annotations","title":"Annotations","text":"<p>Gencode release 36 is used to annotate the human transcripts. Customized RefSeq annotations are used for annotating the viral sequences. </p>"},{"location":"references/#viruses","title":"Viruses","text":"<p>To properly annotate viral sequences the following process was followed:</p> <p>Downloading annotations from NCBI:</p> <p>For example, to download gtf annotations for KSHV genome search \"KSHV\" at NCBI</p> <p></p> <p>On the results page (assembly page), click on \"FTP directory for RefSeq assembly\"</p> <p> </p> <p>The FTP page has the relevant sequence and annotations files:</p> <p></p> <p>Download the file ending with .gtf.gz:</p> <pre><code>&gt; curl -L \"https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/838/265/GCF_000838265.1_ViralProj14158/GCF_000838265.1_ViralProj14158_genomic.gtf.gz\" &gt; GCF_000838265.1_ViralProj14158_genomic.gtf.gz\n\n&gt; gzip -d GCF_000838265.1_ViralProj14158_genomic.gtf.gz\n</code></pre> <p>What needs to be fixed?</p> <p>The GTF file downloaded from NBCI (RefSeq annotations) needs fixing in order to work seemlessly with STAR and CCBR_Pipeliner:</p> <ol> <li>GTF is missing lines for \"transcript\" in column 3. Transcript coordinates can be different from \"gene\" coordinates. I am going to pick all non-\"gene\" lines for a particular gene, filter them for a particular \"transcript\", ~~find the leftmost and rightmost coordinate and use them as coordinates for the new \"transcript\" line in the new GTF file~~. Using leftmost and rightmost script eliminates the UTR regions and hence if a gene has only one transcript (most common scenario), the transcript coordinates mimic the gene coordinates.    eg. for HHV8GK18_gp01  gene these are the lines in the original file</li> </ol> <p><code>bash    NC_009333.1  RefSeq  gene    4   1083    .   +   .   gene_id \"HHV8GK18_gp01\"; db_xref \"GeneID:4961511\"; gbkey \"Gene\"; gene \"K1\"; gene_biotype \"protein_coding\"; locus_tag \"HHV8GK18_gp01\";    NC_009333.1  RefSeq  exon    29  1083    .   +   .   gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"mRNA\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; exon_number \"1\";    NC_009333.1  RefSeq  CDS 105 941 .   +   0   gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\";    NC_009333.1  RefSeq  start_codon 105 107 .   +   0   gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\";    NC_009333.1  RefSeq  stop_codon  942 944 .   +   0   gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\";</code></p> <ol> <li>Some transcripts have ids as \"unknown_transcript_1\". New name will be of the format \"gene_id+_transcript_1\". All child features for the transcript in question need  the transcript_id to be changed to the new name.</li> </ol> <p><code>bash    NC_009333.1  RefSeq  gene    3179    17026   .   +   .   gene_id \"HHV8GK18_gp03\"; db_xref \"GeneID:4961521\"; gbkey \"Gene\"; gene \"ORF6\"; gene_biotype \"protein_coding\"; locus_tag \"HHV8GK18_gp03\";    NC_009333.1  RefSeq  CDS 3179    6574    .   +   0   gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\";    NC_009333.1  RefSeq  start_codon 3179    3181    .   +   0   gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\";    NC_009333.1  RefSeq  stop_codon  6575    6577    .   +   0   gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\";</code></p> <ol> <li>Some gene_id 's are empty. I am planning on reporting these in a separate file ending with .extralines. These need to be edited manually and appended to the output GTF file. I will be using \"chromosome_name:start_coordinate-end_coordinate\" as the format for generating a unique gene_id for replacement GTF entries. Eg.</li> </ol> <p><code>bash    NC_009333.1  RefSeq  exon    118075  118097  .   -   .   gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"misc_RNA\"; product \"miR-K10\"; exon_number \"1\";    NC_009333.1  RefSeq  exon    127997  129368  .   +   .   gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"1\";    NC_009333.1  RefSeq  exon    129517  130671  .   +   .   gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"2\";</code></p> <p>will be changed to something like this:</p> <p><code>bash    NC_009333.1     RefSeq  gene    118075  118097  .       -       .       gene_id \"NC_009333.1:118075-118097\"; gene_name \"NC_009333.1:118075-118097\"; gene_biotype \"miRNA\"; gbkey \"misc_RNA\"; product \"miR-K10\";    NC_009333.1     RefSeq  transcript      118075  118097  .       -       .       gene_id \"NC_009333.1:118075-118097\"; gene_name \"NC_009333.1:118075-118097\"; gene_biotype \"miRNA\"; transcript_id \"NC_009333.1:118075-118097_    transcript_1\"; transcript_name \"NC_009333.1:118075-118097_transcript_1\"; transcript_type \"miRNA\"; gbkey \"misc_RNA\"; product \"miR-K10\";    NC_009333.1     RefSeq  exon    118075  118097  .       -       .       gene_id \"NC_009333.1:118075-118097\"; transcript_id \"NC_009333.1:118075-118097_transcript_1\"; gbkey \"misc_RNA\"; product \"miR-K10\"; exon_number \"1\";    NC_009333.1     RefSeq  gene    127997  130671  .       +       .       gene_id \"NC_009333.1:127997_130671\"; gene_name \"NC_009333.1:127997_130671\"; gene_biotype \"mRNA\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reporte    d\";    NC_009333.1     RefSeq  transcript    127997  130671  .       +       .       gene_id \"NC_009333.1:127997_130671\"; gene_name \"NC_009333.1:127997_130671\"; gene_biotype \"mRNA\"; transcript_id \"NC_009333.1:127997_130671_transcr    ipt_1\"; transcript_name \"NC_009333.1:127997_130671_transcript_1\"; transcript_type \"NC_009333.1:127997_130671_transcript_1\";gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\";    NC_009333.1     RefSeq  exon    127997  129368  .       +       .       gene_id \"NC_009333.1:127997_130671\"; transcript_id \"NC_009333.1:127997_130671_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\";    exon_number \"1\";    NC_009333.1     RefSeq  exon    129517  130671  .       +       .       gene_id \"NC_009333.1:127997_130671\"; transcript_id \"NC_009333.1:127997_130671_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\";    exon_number \"2\";</code></p> <ol> <li>Only few genes have exon features. Most of them have CDS only. The exon line is added to have coordinates same as the CDS, if it is missing.</li> </ol> <p>eg. This</p> <p><code>bash    NC_009333.1  RefSeq  gene    15756   17026   .   +   .   gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; db_xref \"GeneID:4961439\"; gbkey \"Gene\"; locus_tag \"HHV8GK18_gp08\";    NC_009333.1  RefSeq  transcript  15756   16979   .   +   .   gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; transcript_name \"HHV8GK18_gp08_transcript_1\"; transcript_type \"protein_coding\";    NC_009333.1  RefSeq  CDS 15756   16976   .   +   0   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";    NC_009333.1  RefSeq  start_codon 15756   15758   .   +   0   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";    NC_009333.1  RefSeq  stop_codon  16977   16979   .   +   0   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";</code></p> <p>becomes</p> <p><code>bash    NC_009333.1  RefSeq  gene    15756   17026   .   +   .   gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; db_xref \"GeneID:4961439\"; gbkey \"Gene\"; locus_tag \"HHV8GK18_gp08\";    NC_009333.1  RefSeq  transcript  15756   16979   .   +   .   gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; transcript_name \"HHV8GK18_gp08_transcript_1\"; transcript_type \"protein_coding\";    NC_009333.1  RefSeq  exon    15756   16976   .   +   .   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";    NC_009333.1  RefSeq  CDS 15756   16976   .   +   0   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";    NC_009333.1  RefSeq  start_codon 15756   15758   .   +   0   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";    NC_009333.1  RefSeq  stop_codon  16977   16979   .   +   0   gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\";</code></p> <p>Python script to automate:</p> <p>Simple python script take in RefSeq's GTF and spits out new GTF. This script (fix_refseq_gtf.py) is provided in the scripts folder of the repo.:</p> <pre><code># Author: Vishal N. Koparde\n# CCBR NCI\n# Date: Aug, 2020\n\n\nimport sys,copy,argparse\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-i',dest='ingtf', required=True, type=str, help=\"Input RefSeq GTF ..downloaded from NCBI ftp server\")\nparser.add_argument('-o',dest='outgtf', required=True, type=str, help=\"Modified Output RefSeq GTF\")\nargs = parser.parse_args()\n\ndef get_gene_id(column9):\n    x=column9.strip().split()\n    for i,value in enumerate(x):\n        if value==\"gene_id\":\n            gene_id_index=i+1\n            break\n    gene_id=x[gene_id_index]\n    return gene_id\n\ndef get_gene_biotype(column9):\n    x=column9.strip().split()\n    found=0\n    for i,value in enumerate(x):\n        if value==\"gene_type\" or value==\"gene_biotype\":\n            gene_biotype_index=i+1\n            found=1\n            break\n    if found==0:\n        return '\"unknown\";'\n    gene_biotype=x[gene_biotype_index]\n    return gene_biotype\n\ndef get_gene_name(column9):\n    x=column9.strip().split()\n    found=0\n    for i,value in enumerate(x):\n        if value==\"gene\" or value==\"gene_name\":\n            gene_index=i+1\n            found=1\n            break\n    if found==0:\n        return \"\"\n    gene_name=x[gene_index]\n    return gene_name\n\ndef get_transcript_id(column9):\n    x=column9.strip().split()\n    found=0\n    for i,value in enumerate(x):\n        if value==\"transcript_id\":\n            transcript_id_index=i+1\n            found=1\n            break\n    if found==0:\n        return '\"transcript_id_unknown\";'\n    transcript_id=x[transcript_id_index]\n    return transcript_id\n\ndef fix_transcript_id(column9,g):\n    x=column9.strip().split()\n    found=0\n    for i,value in enumerate(x):\n        if value==\"transcript_id\":\n            transcript_id_index=i+1\n            found=1\n            break\n    x[transcript_id_index]=g\n    if found==0:\n        x.append(\"transcript_id\")\n        x.append(g)\n    x=\" \".join(x)\n    return x   \n\ndef create_new_transript_id(g,i):\n    n=g.split('\"')\n    n[-2]+=\"_transcript_\"+str(i)\n    n='\"'.join(n)\n    return n\n\ndef are_exons_present(transcript_lines):\n    for l in transcript_lines:\n        l_split=l.strip().split(\"\\t\")\n        if l_split[2]==\"exon\":\n            return True\n    else:\n        return False\n\n#create genelist\ngenelist=[]\ngene_coords=dict()\nall_gtflines=list(filter(lambda x:not x.startswith(\"#\"),open(args.ingtf).readlines()))\nblank_gene_id_lines=[]\nfor f in all_gtflines:\n    its_a_gene=0\n    if f.strip().split(\"\\t\")[2]==\"gene\":\n        its_a_gene=1\n    gene_id=get_gene_id(f.strip().split(\"\\t\")[8])\n    if gene_id=='\"\";':\n        blank_gene_id_lines.append(f)\n        continue\n    genelist.append(gene_id)\n    if its_a_gene==1 and not gene_id in gene_coords:\n        gene_coords[gene_id]=(int(f.strip().split(\"\\t\")[3]),int(f.strip().split(\"\\t\")[4]))\ngenelist=list(set(genelist))\n# print(genelist)\n# print(len(blank_gene_id_lines))\n\n#get genes2transcripts ... this is only for verifying that every gene has only 1 transript... this is the assumption\ngene_id_2_transcript_ids=dict()\nfor g in genelist:\n    if not g in gene_id_2_transcript_ids:\n        gene_id_2_transcript_ids[g]=list()\n    lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines))\n    non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id))\n    for l in non_gene_lines:\n        t_id=get_transcript_id(l.strip().split(\"\\t\")[8])\n        if t_id!='\"transcript_id_unknown\";':\n            gene_id_2_transcript_ids[g].append(t_id)\n            gene_id_2_transcript_ids[g]=list(set(gene_id_2_transcript_ids[g]))\n\ngeneid2transcriptidfile=open(args.ingtf+\".geneid2transcriptid\",'w')\nfor k,v in gene_id_2_transcript_ids.items():\n    geneid2transcriptidfile.write(\"%s\\t%s\\n\"%(k,v))\ngeneid2transcriptidfile.close()\n\n#get genenames\ngene_id_2_gene_name=dict()\nfor g in genelist:\n    if not g in gene_id_2_gene_name:\n        gene_id_2_gene_name[g]=list()\n    lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines))\n    gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id))\n    # if len(gene_line)==0:\n    #     for l in lines_with_gene_id:\n    #         print(l,)\n    gene_line=gene_line[0]\n    gene_name=get_gene_name(gene_line.split(\"\\t\")[8])\n    if gene_name==\"\":\n        gene_name=g\n    gene_id_2_gene_name[g]=gene_name\n# for k,v in gene_id_2_gene_name.items():\n#     print(k,v)\n\n#get transcript coordinates\ngene_id_2_transcript_coordinates=dict()\nfor g in genelist:\n    # print(\"gene=\",g)\n    if not g in gene_id_2_transcript_coordinates:\n        gene_id_2_transcript_coordinates[g]=list()\n    if len(gene_id_2_transcript_ids[g])==1:\n        gene_id_2_transcript_coordinates[g].append(gene_coords[g])\n    else:\n        lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines))\n        non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id))\n        for t in gene_id_2_transcript_ids[g]:\n            # print(\"transcript=\",t)\n            transcript_lines=list(filter(lambda x:t in x,non_gene_lines))\n            coords=[]\n            for l in transcript_lines:\n                # print(l.strip())\n                l_split=l.split(\"\\t\")\n                coords.append(int(l_split[3]))\n                coords.append(int(l_split[4]))\n            # print()\n            gene_id_2_transcript_coordinates[g].append((min(coords),max(coords)))\n    # print(gene_id_2_transcript_coordinates[g])\n# for k,v in gene_id_2_transcript_coordinates.items():\n    # print(k,v)\n# exit()\n\n#get gene biotype\\\ngene_id_2_gene_biotype=dict()\nfor g in genelist:\n    lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines))\n    gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id))\n    gene_line=gene_line[0]\n    gene_biotype=get_gene_biotype(gene_line.split(\"\\t\")[8])\n    gene_id_2_gene_biotype[g]=gene_biotype\n# for k,v in gene_id_2_gene_biotype.items():\n#     print(k,v)\n\nout=open(args.outgtf,'w')    \nfor g in genelist:\n    lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines))\n    gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id))\n    gene_line=gene_line[0]\n    gene_line=gene_line.split(\"\\t\")\n    others=gene_line.pop(-1)\n    gene_line_copy=copy.copy(gene_line)\n    # other key value pairs to add in the gene_line(col9)\n    others_to_add=[]\n    # print(\"others=\",others)\n    for o in others.strip().split(\"; \"):\n        # print(\"o=\",o)\n        o2=o.split(\" \")\n        # print(\"o2=\",o2)\n        key=o2[0]\n        value=o2[1:]\n        value=\" \".join(value)\n        # print(\"key=\",key)\n        # print(\"value=\",value)\n        if key in [\"gene_id\",\"gene\",\"gene_name\",\"gene_type\",\"gene_biotype\"]:\n            continue\n        else:\n            others_to_add.append(key)\n            if not \";\" in value:\n                others_to_add.append(value+\";\")\n            else:\n                others_to_add.append(value)\n\n    col9=[]\n    col9.append(\"gene_id\")\n    col9.append(g)\n    col9.append(\"gene_name\")\n    col9.append(gene_id_2_gene_name[g])\n    col9.append(\"gene_biotype\")\n    col9.append(gene_id_2_gene_biotype[g])\n    col9plus=copy.copy(col9)\n    col9plus.extend(others_to_add)\n    gene_col9=\" \".join(col9plus)\n    gene_line.append(gene_col9)\n    gene_line=\"\\t\".join(gene_line)\n    out.write(\"%s\\n\"%(gene_line))\n\n    non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id))\n    for i,t in enumerate(gene_id_2_transcript_ids[g]):\n        transcript_line=copy.copy(gene_line_copy)\n        transcript_line[2]=\"transcript\"\n        transcript_line[3]=str(gene_id_2_transcript_coordinates[g][i][0])\n        transcript_line[4]=str(gene_id_2_transcript_coordinates[g][i][1])\n        new_trascript_id=create_new_transript_id(g,i+1)\n        transcript_col9=copy.copy(col9)\n        transcript_col9.append(\"transcript_id\")\n        transcript_col9.append(new_trascript_id)\n        transcript_col9.append(\"transcript_name\")\n        transcript_col9.append(new_trascript_id)\n        transcript_col9.append(\"transcript_type\")\n        transcript_col9.append(gene_id_2_gene_biotype[g])\n        transcript_col9=\" \".join(transcript_col9)\n        transcript_line.append(transcript_col9)\n        transcript_line=\"\\t\".join(transcript_line)   \n        out.write(\"%s\\n\"%(transcript_line))\n\n        transcript_lines=list(filter(lambda x:t in x,non_gene_lines))\n        have_exons=are_exons_present(transcript_lines)\n        for l in transcript_lines:\n            # print(l)\n            l=l.strip().split(\"\\t\")\n            tofix=l.pop(-1)\n            l.append(fix_transcript_id(tofix,new_trascript_id))\n            if l[2]==\"CDS\" and have_exons==False:\n                l2=copy.copy(l)\n                l2[7]=\".\"\n                l2[2]=\"exon\"\n                l2=\"\\t\".join(l2)\n                out.write(\"%s\\n\"%(l2))\n            l=\"\\t\".join(l)\n            out.write(\"%s\\n\"%(l))\n            # print(l)\nout.close()\n\nout=open(args.ingtf+\".extralines\",'w')\nfor b in blank_gene_id_lines:\n    out.write(b)\nout.close()\n</code></pre> <p>Final versions of the GTF as located here:</p> <p><code>/data/Ziegelbauer_lab/circRNADetection/viral_db/GTF/final_versions</code></p>"},{"location":"tutorial/","title":"CHARLIE","text":""},{"location":"tutorial/#tutorial","title":"Tutorial","text":""},{"location":"tutorial/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Biowulf account: Biowulf account can be requested here</p> </li> <li> <p>Membership to Ziegelbauer user group on Biowulf. You can check this by typing the following command:</p> </li> </ul> <p><code>bash   % groups</code></p> <p>output:</p> <p><code>bash   CCBR kopardevn Ziegelbauer_lab</code></p> <p>If <code>Ziegelbauer_lab</code> is not listed then you can email a request to be added to the groups here</p>"},{"location":"tutorial/#location","title":"Location","text":"<p>Different versions of circRNA DAQ pipeline have been parked at <code>/data/Ziegelbauer_lab/Pipelines/circRNA</code></p> <pre><code>% ls -la /data/Ziegelbauer_lab/Pipelines/circRNA\n</code></pre> <p>output:</p> <pre><code>total 135\ndrwxrws--T. 6 kopardevn Ziegelbauer_lab 4096 Feb  4 18:27 .\ndrwxrws--T. 3 kopardevn Ziegelbauer_lab 4096 Jan 12 09:05 ..\nlrwxrwxrwx. 1 kopardevn Ziegelbauer_lab   54 Feb  3 14:29 dev -&gt; /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA\ndrwxrws---. 3 kopardevn Ziegelbauer_lab 4096 Jan 12 09:07 v0.1.0\ndrwxrws---. 6 kopardevn Ziegelbauer_lab 4096 Jan 12 17:32 v0.2.1\ndrwxrws---. 6 kopardevn Ziegelbauer_lab 4096 Jan 14 10:24 v0.3.3\ndrwxrws---. 7 kopardevn Ziegelbauer_lab 4096 Feb  4 18:26 v0.4.0\n</code></pre> <p>The exacts versions listed here may changed as newer versions are added. Also, the <code>dev</code> version is pointing to the most recent untagged version of the pipeline (use at own risk!)</p>"},{"location":"tutorial/#init","title":"Init","text":"<p>To get help about the pipeline you can run:</p> <pre><code>% bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh --help\n</code></pre> <p>output:</p> <pre><code>Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA\nGit Commit/Tag: b2f387c1b6854646d12974cd16da1168d93bb43b    v0.4.0-14-gb2f387c\nrun_circrna_daq.sh: run the workflow to DAQ (detect, annotate and quantify circRNAs)\nUSAGE:\n  bash run_circrna_daq.sh &lt;MODE&gt;\nRequired Positional Argument:\n  MODE: [Type: Str] Valid options:\n    a) init &lt;path_to_workdir&gt; : initialize workdir\n    b) run &lt;path_to_workdir&gt;: run with slurm\n    c) reset &lt;path_to_workdir&gt; : DELETE workdir dir and re-init it\n    e) dryrun &lt;path_to_workdir&gt; : dry run snakemake to generate DAG\n    f) unlock &lt;path_to_workdir&gt; : unlock workdir if locked by snakemake\n    g) runlocal &lt;path_to_workdir&gt;: run without submitting to sbatch\n</code></pre> <p>You can replace <code>v0.4.0</code> in the above command with the latest version to use a newer version. <code>run_circrna_daq.sh</code> was called <code>test.sh</code> in versions older than <code>v0.4.0</code>.</p> <p>To initial the working directory run:</p> <pre><code>% bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh init /scratch/circRNA_daq_test\n</code></pre> <p>NOTE</p> <p>With version 0.6.0 or newer the arguments to the wrapper script need to be provided with -w/-m prefixes</p> <p><code>bash bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.6.0/run_circrna_daq.sh -m=init -w=/scratch/circRNA_daq_test</code></p> <p>This assumes that <code>/scratch/circRNA_daq_test</code> does not exist before running this command and is at a location where write permissions are available.</p> <pre><code>% bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh init /scratch/circRNA_daq_test\n</code></pre> <p>\u200b   output:</p> <pre><code>Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA\nGit Commit/Tag: b2f387c1b6854646d12974cd16da1168d93bb43b    v0.4.0-14-gb2f387c\nWorking Dir: /scratch/circRNA_daq_test\n/data/Ziegelbauer_lab/circRNADetection/scripts/circRNA\n/scratch/circRNA_daq_test\nLogs Dir: /scratch/circRNA_daq_test/logs\nStats Dir: /scratch/circRNA_daq_test/stats\nDone Initializing /scratch/circRNA_daq_test. You can now edit /scratch/circRNA_daq_test/config.yaml and /scratch/circRNA_daq_test/samples.tsv\n</code></pre> <p>The above command creates <code>/scratch/circRNA_daq_test</code> folder and creates 2 subfolders <code>logs</code> and <code>stats</code> inside that folder along with <code>config.yaml</code> and <code>samples.tsv</code> files.</p> <pre><code>% tree /scratch/circRNA_daq_test\n</code></pre> <p>\u200b   output:</p> <pre><code>/scratch/circRNA_daq_test\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 samples.tsv\n\u2514\u2500\u2500 stats\n\n2 directories, 2 files\n</code></pre>"},{"location":"tutorial/#configyaml","title":"config.yaml","text":"<p>This file is used to fine tune the execution of the pipeline by setting:</p> <ul> <li>sample sheet location ... aka <code>samples.tsv</code></li> <li>whether to run CLEAR pipeline or not by setting run_clear to <code>True</code> or <code>False</code></li> <li>describes the location of other resources/indexes/tools etc. Generally, these do NOT need to be changed.</li> </ul>"},{"location":"tutorial/#samplestsv","title":"samples.tsv","text":"<p>Tab delimited definition of sample sheet. The header is fixed and each row represents a sample. It has 3 columns:</p> <ol> <li>sampleName = Name of the sample. This has to be unique.</li> <li>path_to_R1_fastq = absolute path to the read1 fastq.gz file.</li> <li>path_to_R2_fastq = absolute path to the read2 fastq.gz file. If the sample was sequenced in single-end mode, then leave this blank.</li> </ol> <p>Running init will put the following example file in the workdir supplied and it looks like this:</p> <pre><code>% more /scratch/circRNA_daq_test/samples.tsv\n</code></pre> <p>output:</p> <pre><code>sampleName  path_to_R1_fastq    path_to_R2_fastq\nGI1_N   /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R1_001.fastq.gz    /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R2_001.fastq.gz\nGI1_T   /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/6_GI112118_tum_S5_R1_001.fastq.gz\n</code></pre>"},{"location":"tutorial/#dryrun","title":"Dryrun","text":"<p>Once the <code>samples.tsv</code> file has been edited appropriately to include the desired samples, it is a good idea to dryrun the pipeline to ensure that everything will work as desired. Dryrun can be run as follows:</p> <pre><code>% bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh dryrun /scratch/circRNA_daq_test\n</code></pre> <p>Here is the output of the above command.</p>"},{"location":"tutorial/#run","title":"Run","text":"<p>Upon verifying that dryrun is successful. You can then submit the job to the cluster using the following command:</p> <pre><code>% bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh run /scratch/circRNA_daq_test\n</code></pre> <p>NOTE:</p> <p>With v0.6.0 or later the above command will be:</p> <p><code>bash bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh -m=run -w=/scratch/circRNA_daq_test</code></p> <p>output:</p> <pre><code>Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA\nGit Commit/Tag: 37419bc0eb196fb1e137849ebeb2739a1c12126c    v0.4.0-16-g37419bc\nWorking Dir: /scratch/circRNA_daq_test\n[+] Loading python 3.7  ...\n[+] Loading snakemake  5.24.1\nRunning...\nls: cannot access /scratch/circRNA_daq_test/slurm-*.out: No such file or directory\n7930909\n</code></pre> <p><code>7930909</code> is the jobid returned by the slurm job scheduler on biowulf. This means that the job was successfully submitted, it will spawn off other subjobs which in-turn will be run and outputs will be moved to the <code>results</code> folder created inside the working directory supplied at command line. You can check the status of your queue of jobs in biowulf running:</p> <pre><code>% squeue -u `whoami`\n</code></pre> <p>output:</p> <pre><code>             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n           7930909  ccr,norm  circRNA kopardev PD       0:00      1 (None)\n</code></pre> <p><code>ST</code> in the above results stands for Status and <code>PD</code> means Pending. The status will change from pending(<code>PD</code>) to running(<code>R</code>) to completed as jobs are run on the cluster.</p> <p>Next, just sit tight until the pipeline finishes. You can keep monitoring the queue as shown above. If there are no jobs running on biowulf, then your pipeline has finished (or errored out!)</p> <p>Once completed the output should something like this:</p> <pre><code>% tree /scratch/circRNA_daq_test\n</code></pre> <p>output:</p> <pre><code>/scratch/circRNA_daq_test\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 fastqs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.R1.fastq.gz -&gt; /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R1_001.fastq.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.R2.fastq.gz -&gt; /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R2_001.fastq.gz\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_T.R1.fastq.gz -&gt; /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/6_GI112118_tum_S5_R1_001.fastq.gz\n\u251c\u2500\u2500 logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7658778.cutadapt.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7658778.cutadapt.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7658779.cutadapt.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7658779.cutadapt.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659728.fastqc.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659728.fastqc.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659729.star1p.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659729.star1p.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659730.ciri.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659730.ciri.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659731.clear.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7659731.clear.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660529.ciri.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660529.ciri.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660738.clear.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660738.clear.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660753.fastqc.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660753.fastqc.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660754.star1p.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7660754.star1p.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7661100.merge_SJ_tabs..err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7661100.merge_SJ_tabs..out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7661134.star2p.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7661134.star2p.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7661135.star2p.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7661135.star2p.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662317.create_BSJ_bam.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662317.create_BSJ_bam.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662319.annotate_circRNA.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662319.annotate_circRNA.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662563.annotate_circRNA.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662563.annotate_circRNA.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662564.create_BSJ_bam.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662564.create_BSJ_bam.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662567.split_BAM_create_BW.sample=GI1_T.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7662567.split_BAM_create_BW.sample=GI1_T.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7663000.create_circexplorer_count_matrix..err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7663000.create_circexplorer_count_matrix..out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7663642.create_ciri_count_matrix..err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7663642.create_ciri_count_matrix..out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7663643.split_BAM_create_BW.sample=GI1_N.err\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 7658773.7663643.split_BAM_create_BW.sample=GI1_N.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 slurm-7658773.out.gz\n\u251c\u2500\u2500 qc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 fastqc\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R1_fastqc.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R1_fastqc.zip\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R1.trim_fastqc.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R1.trim_fastqc.zip\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R2_fastqc.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R2_fastqc.zip\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R2.trim_fastqc.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R2.trim_fastqc.zip\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_T.R1_fastqc.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_T.R1_fastqc.zip\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_T.R1.trim_fastqc.html\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 GI1_T.R1.trim_fastqc.zip\n\u251c\u2500\u2500 report.html\n\u251c\u2500\u2500 results\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 circExplorer_BSJ_count_matrix.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 circExplorer_BSJ_count_matrix_with_annotations.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 circExplorer_count_matrix.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 circExplorer_count_matrix_with_annotations.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ciri_count_matrix.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ciri_count_matrix_with_annotations.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 circExplorer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.back_spliced_junction.bed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_circexplorer_parse.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.circularRNA_known.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 low_conf_GI1_N.circularRNA_known.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ciri\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 CIRIerror.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.bwa.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.bwa.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.ciri.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_N.ciri.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 CLEAR\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 circ\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 bsj.bed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fusion\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 junctions.bed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hisat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sp.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 quant\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 quant.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 STAR1p\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p1.Chimeric.out.junction\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p1.Log.final.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p1.Log.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p1.Log.progress.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_N_p1.SJ.out.tab\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 STAR2p\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.readids\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p2.Aligned.sortedByCoord.out.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p2.Aligned.sortedByCoord.out.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p2.Chimeric.out.junction\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p2.Log.final.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p2.Log.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_N_p2.Log.progress.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_N_p2.SJ.out.tab\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 trim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_N.R1.trim.fastq.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 GI1_N.R2.trim.fastq.gz\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 circExplorer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.back_spliced_junction.bed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_circexplorer_parse.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.circularRNA_known.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 low_conf_GI1_T.circularRNA_known.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ciri\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 CIRIerror.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.bwa.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.bwa.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.ciri.log\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_T.ciri.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 CLEAR\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 circ\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 bsj.bed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 fusion\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 junctions.bed\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hisat\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sp.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 quant\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 quant.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 STAR1p\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p1.Chimeric.out.junction\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p1.Log.final.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p1.Log.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p1.Log.progress.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_T_p1.SJ.out.tab\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 STAR2p\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.readids\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bw\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p2.Aligned.sortedByCoord.out.bam\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p2.Aligned.sortedByCoord.out.bam.bai\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p2.Chimeric.out.junction\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p2.Log.final.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p2.Log.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 GI1_T_p2.Log.progress.out\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GI1_T_p2.SJ.out.tab\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 trim\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 GI1_T.R1.trim.fastq.gz\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 GI1_T.R2.trim.fastq.gz\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pass1.out.tab\n\u251c\u2500\u2500 samples.tsv\n\u251c\u2500\u2500 stats\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 snakemake.log.20210204103112.gz\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 snakemake.stats.20210204103112.gz\n\u251c\u2500\u2500 submit_script.sbatch\n</code></pre>"},{"location":"tutorial/#runlocal","title":"Runlocal","text":"<p>If you have grabbed an interactive node using <code>sinteractive</code> and have a small test dataset in the <code>samples.tsv</code> and simply want to quickly check if everything works as expected. You can run locally, i.e. directly on the interactive node without submitting to the cluster using:</p> <pre><code>% bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh runlocal /scratch/circRNA_daq_test\n</code></pre> <p>This is only for testing purposes, do not use it for running 10s of samples as you will be soon timed out of the interactive node.</p>"},{"location":"versions/","title":"CHARLIE","text":""},{"location":"versions/#versionrelease-highlights","title":"Version/Release highlights","text":""},{"location":"versions/#v010","title":"v0.1.0","text":"<ul> <li>base version</li> <li>PE only support</li> </ul>"},{"location":"versions/#v02x","title":"v0.2.x","text":"<ul> <li>SE support added .. PE/SE samples handled concurrently</li> <li><code>envmodules</code> used in Snakemake in place of <code>module load</code> statements</li> </ul>"},{"location":"versions/#v03x","title":"v0.3.x","text":"<ul> <li>Lookup table for hg38 to hg19 circRNA annotations is updated... this eliminate one-to-many hits from the previous version</li> <li>BSJs extracted as different bam file.</li> <li>flowchart added</li> <li>adding slurmjobid to log/err file names</li> <li>v0.3.1 has significant (&gt;10X) performance improvements at BSJ bam creation</li> <li>v0.3.3 splits BSJ bams into human and viral bams, and also converts them to bigwigs</li> <li>v0.3.4 adds hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC reference (source:Sarah)</li> </ul>"},{"location":"versions/#v04x","title":"v0.4.x","text":"<ul> <li>CLEAR added.</li> <li> <p>wrapper script (<code>run_circrna_daq.sh</code>) added for local and cluster execution.</p> </li> <li> <p>\"spliced reads only\" bam created and split by regions</p> </li> </ul>"},{"location":"versions/#v05x","title":"v0.5.x","text":"<ul> <li><code>run_clear</code> is now set to True (as default)</li> <li><code>circ_quant</code> replaces <code>clear_quant</code> in the CLEAR rule. In order words, we are reusing the STAR alignment file and the circExplorer2 output file for running CLEAR. No need to run HISAT2 and TopHat (fusion-search with Bowtie1). This is much quicker.</li> <li>Using picard to estimate duplicates using MarkDuplicates</li> <li>Generating a per-run multiqc HTML report</li> <li>Using eulerr R package to generate CIRI-CircExplorer circRNA Venn diagrams and include them in the mulitqc report</li> <li>Gather per job cluster metadata like queue time, run time, job state etc. Stats are compiled in HPC_summary file</li> <li>CLEAR pipeline quant.txt file is annotated for known circRNAs</li> <li><code>WORKDIR</code> can now be a relative path</li> <li>bam2bw conversion fix for BSJ and spliced_reads. Issue closed!</li> </ul>"}]}