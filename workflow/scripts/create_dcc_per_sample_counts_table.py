import argparse
import pandas

parser = argparse.ArgumentParser(description='Merge information from CircCoordinates and CircRNACount files generated by DCC')
parser.add_argument('--CircCoordinates', dest='CircCoordinates', type=str, required=True,
                    help='CircCoordinates file from DCC')
parser.add_argument('--CircRNALinearCount', dest='CircRNACount', type=str, required=True,
                    help='CircRNACount + LinearCount output file from DCC')
# parser.add_argument('--samplename', dest='samplename', type=str, required=True,
#                     help='Sample Name')
parser.add_argument('-o',dest='outfile',required=True,help='merged table')
args = parser.parse_args()

# sn=args.samplename

# load files
CircCoordinates=pandas.read_csv(args.CircCoordinates,sep="\t",header=0)
CircRNACount=pandas.read_csv(args.CircRNACount,sep="\t",header=0)

# CircRNACount columns are:
# | # | ColName                        |
# |---|--------------------------------|
# | 1 | Chr                            |
# | 2 | Start                          |
# | 3 | End                            |
# | 4 | Strand                         |
# | 5 | <sample_junction_filename>     | <- counts

# LinearCount columns are:
# | 1 | Chr                            |
# | 2 | Start                          |
# | 3 | End                            |
# | 4 | <sample_junction_filename>     | <- linear counts

# CircRNALinearCount columns are:
# | 1 | Chr                            |
# | 2 | Start                          |
# | 3 | End                            |
# | 4 | Strand                         |
# | 5 | <sample_junction_filename>     | <- counts
# | 6 | <sample_junction_filename>     | <- linear counts


# CircCoordinates columns are:
# | # | ColName       |
# |---|---------------|
# | 1 | Chr           |
# | 2 | Start         |
# | 3 | End           |
# | 4 | Gene          |
# | 5 | JunctionType  |
# | 6 | Strand        |
# | 7 | Start-End     |
# | 8 | OverallRegion |

old_names = CircCoordinates.columns 
new_names = ['chr', 'start', 'end', 'gene', 'junction_type', 'strand', 'start_end_region', 'overall_region']
CircCoordinates.rename(columns=dict(zip(old_names, new_names)), inplace=True)
CircCoordinates['dcc_annotation']=CircCoordinates['junction_type'].astype(str)+"##"+CircCoordinates['start_end_region'].astype(str)
CircCoordinates['circRNA_id']=CircCoordinates['chr'].astype(str)+"##"+CircCoordinates['start'].astype(str)+"##"+CircCoordinates['end'].astype(str)+"##"+CircCoordinates['strand'].astype(str)
CircCoordinates.drop(['chr', 'start', 'end', 'strand', 'gene','junction_type','start_end_region','overall_region'],axis=1,inplace=True)
CircCoordinates.set_index(['circRNA_id'],inplace=True)
# CircCoordinates.to_csv("tmp",sep="\t",header=True,index=True)

old_names = CircRNACount.columns 
new_names = ['chr', 'start', 'end', 'strand', 'read_count', 'linear_read_count']
CircRNACount.rename(columns=dict(zip(old_names, new_names)), inplace=True)
CircRNACount['circRNA_id']=CircRNACount['chr'].astype(str)+"##"+CircRNACount['start'].astype(str)+"##"+CircRNACount['end'].astype(str)+"##"+CircRNACount['strand'].astype(str)
CircRNACount.set_index(['circRNA_id'],inplace=True)
# CircRNACount.to_csv("tmp2",sep="\t",header=True,index=True)

CircRNACount=CircRNACount.merge(CircCoordinates,left_index=True,right_index=True,how="left",sort=False)
CircRNACount.fillna("0",inplace=True)
CircRNACount.to_csv(args.outfile,sep="\t",header=True,index=False)

